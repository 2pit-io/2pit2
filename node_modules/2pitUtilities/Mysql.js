const mysql = require('mysql');

/**
 * Get a single row based on a possibly composite key
 */
exports.select = function (connection, table, where, { columns = null , order = null, joins = null } = {}) 
{
  // Serialize columns list
  let tableExpr = table;

  // Serialize columns list
  let columnsExpr = '';
  if (!columns) columnsExpr = '*';
  else {
    let first = true;
    columns.forEach( atom => {
      if (!first) columnsExpr += ', ';
      first = false;
      columnsExpr += table + '.' + atom;
    });
  }

  // Serialize where predicates
  let whereExpr = ' WHERE ' + where.serialize();

  // Format the 'ordered by' clause
  orderExpr = '';
  if (order) {
    orderExpr += ' ORDER BY';
    order.forEach( column => {
      orderExpr += ' ' + column.substr(1) + ((column.substr(0, 1) == '+') ? ' ASC' : ' DESC');
    });
  }

  // Format the 'joins' clause
  joinsExpr = '';
  if (joins) {
    joins.forEach( expr => {

      let tableName, tableAlias;
      Object.keys(expr[0]).forEach( key => { tableAlias = key; tableName = expr[0][key]; });

      // Add joined columns
      expr[2].forEach( column => {
        let columnAlias, columnName;
        Object.keys(column).forEach( key => { columnAlias = key; columnName = column[key]; });
        columnsExpr += ', ' + tableAlias + '.' + columnName + ' AS ' + columnAlias;
      });

      if (['LEFT', 'RIGHT'].includes(expr[3])) joinsExpr += ' ' + expr[3];
      joinsExpr += ' JOIN';
      joinsExpr += ' ' + tableName + ' AS ' + tableAlias;
      joinsExpr += ' ON ' + expr[1];
    });
  }

  let query = 'SELECT ' + columnsExpr + ' FROM ' + tableExpr + joinsExpr + whereExpr + orderExpr;
console.log(query);
  return new Promise ( (resolve, reject) => {

    if (!connection) resolve(query);

    // Execute the query
    connection.query(query, ( err, rows ) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}
